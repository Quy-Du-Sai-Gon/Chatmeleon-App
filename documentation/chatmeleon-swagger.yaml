openapi: 3.0.3
info:
  title: Chatmeleon
  description: |-

    Welcome to our Swagger documentation with API. This is a Chatmeleon Server based on the OpenAPI 3.0 specification. 

    Useful link:
    - [Chatmeleon repository](https://github.com/Quy-Du-Sai-Gon/Chatmeleon-App)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:5000
tags:
  - name: conversations
  - name: messages
paths:
  /conversations:
    get:
      description: Retrieve a page of conversations associated with the current logged in user, with the support of cursor-based pagination. The page will be an array containing the newest conversation to the oldest conversation from the cursor. For example [convo1, convo2, convo3, convo4, convo5] with convo1 being the most recently active conversation and convo5 being the oldest active conversation.
      tags:
        - conversations
      summary: Get current user's conversations
      parameters:
        - name: pageSize
          in: query
          description: The number of conversation in one page. When this query is empty, is 0, or is not a valid number, a default value of 10 will be used. A positive pageSize will return pageSize number of conversation that is older than the cursor, for example [cursor = convo2.id; pageSize = 2] will return [convo3, convo4]. A negative pageSize will do the opposite, [cursor = convo4.id; pageSize = -2] will return [convo2, convo3].
          schema:
            type: integer
            default: 10
        - name: cursor
          in: query
          description: The ID of the conversation, adjacent to which a page of other conversations will be retrieved. This can be used in pagination to get the next conversation page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently active pageSize number of conversation. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [convo1, convo2], [cursor = null; pageSize = -3] will return [convo3, convo4, convo5]. An invalid ObjectId string will result in a 400 Bad Request response.
          schema:
            $ref: "#/components/schemas/ObjectId"
            default: null
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of conversations related to the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: [id, lastMessageId, isGroup]
                  properties:
                    id:
                      $ref: "#/components/schemas/ObjectId"
                    lastMessageId:
                      $ref: "#/components/schemas/ObjectId"
                    name:
                      type: string
                    groupAvatar:
                      type: string
                      format: uri
                    isGroup:
                      type: boolean
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.
    post:
      description: Create the first non-group conversation with the first message
      tags:
        - conversations
      summary: Create the first non-group conversation
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A conversations ID with the first message ID related to the user.
          content:
            application/json:
              schema:
                type: object
                required: [conversationId, messageId, createdAt]
                properties:
                  conversationId:
                    $ref: "#/components/schemas/ObjectId"
                  messageId:
                    $ref: "#/components/schemas/ObjectId"
                  createdAt:
                    type: string
                    format: date-time
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.
      requestBody:
        description: Message data to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [relatedUserId]
              properties:
                relatedUserId:
                  $ref: "#/components/schemas/ObjectId"
                body:
                  type: string
                image:
                  type: string
                  format: uri
  /conversations/{conversationId}:
    get:
      description: Retrieve a conversation infomation by its ID.
      tags:
        - conversations
      summary: Get a conversation
      parameters:
        - name: conversationId
          in: path
          description: The unique conversation ID.
          required: true
          schema:
            $ref: "#/components/schemas/ObjectId"
          example: "fdf919880bcde1e42cb3e588"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A conversation record.
          content:
            application/json:
              schema:
                type: object
                required:
                  [createdAt, lastActive, lastMessageId, isGroup, userIds]
                properties:
                  createdAt:
                    type: string
                    format: date-time
                  name:
                    type: string
                  lastActive:
                    type: string
                    format: date-time
                  lastMessageId:
                    $ref: "#/components/schemas/ObjectId"
                  isGroup:
                    type: boolean
                  groupAvatar:
                    type: string
                    format: uri
                  nicknames:
                    type: array
                    items:
                      $ref: "#/components/schemas/Nickname"
                  userIds:
                    type: array
                    items:
                      $ref: "#/components/schemas/ObjectId"
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.

  /conversations/{conversationId}/messages:
    get:
      description: Retrieve a page of messages of a conversation identified by the conversation's ID with the support of cursor-based pagination. The page will be an array containing the newest messages to the oldest messgaes from the cursor. For example [mess1, mess2, mess3, mess4, mess5] with mess1 being the most recently sent message and mess5 being the oldest message.
      tags:
        - messages
      summary: Get all messages in a conversation
      parameters:
        - name: conversationId
          in: path
          description: The unique conversation ID.
          required: true
          schema:
            $ref: "#/components/schemas/ObjectId"
          example: "fdf919880bcde1e42cb3e588"
        - name: pageSize
          in: query
          description: The number of messages in one page. When this query is empty, is 0, or is not a valid number, a default value of 10 will be used. A positive pageSize will return a pageSize number of message that is older than the cursor, for example [cursor = mess2.id; pageSize = 2] will return [mess3, mess4]. A negative pageSize will do the opposite, [cursor = mess4.id; pageSize = -2] will return [mess2, mess3].
          schema:
            type: integer
            default: 10
        - name: cursor
          in: query
          description: The ID of the message, adjacent to which a page of other messages will be retrieved. This can be used in pagination to get the next message page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently sent pageSize number of messages. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [mess1, mess2], [cursor = null; pageSize = -3] will return [mess3, mess4, mess5]. An invalid ObjectId string will result in a 400 Bad Request response.
          schema:
            $ref: "#/components/schemas/ObjectId"
            default: null
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All messages's information.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: [id, createdAt, seenIds, senderId]
                  properties:
                    id:
                      $ref: "#/components/schemas/ObjectId"
                    body:
                      type: string
                    image:
                      type: string
                      format: uri
                    createdAt:
                      type: string
                      format: date-time
                    seenIds:
                      type: array
                      items:
                        $ref: "#/components/schemas/ObjectId"
                    senderId:
                      $ref: "#/components/schemas/ObjectId"
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.
    post:
      description: Create a new message.
      tags:
        - messages
      summary: Create a message
      parameters:
        - name: conversationId
          in: path
          description: The unique conversation ID.
          required: true
          schema:
            $ref: "#/components/schemas/ObjectId"
          example: "fdf919880bcde1e42cb3e588"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Message created successfully.
          content:
            application/json:
              schema:
                type: object
                required: [messageId, createdAt]
                properties:
                  messageId:
                    $ref: "#/components/schemas/ObjectId"
                  createdAt:
                    type: string
                    format: date-time
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.

      requestBody:
        description: Message data to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                image:
                  type: string
                  format: uri

  /friend/send:
    post:
      description: Create a friend sending and pending relationship between two users. For example, if A send B a friend request, relationship of A to B will be of type SENDING_FRIEND_REQUEST, and B to A will be of type PENDING_FRIEND_REQUEST.
      tags:
        - relationships
      summary: Create a relationship.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Relationship created successfully. This can only be achieved if there was no prior relationship between user A and user B. Meaning there did not exist a relationship record between them.
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized. This can be due to an already existed relationship of any type prior to this request. For example, any relationship of type FRIEND - FRIEND (cannot send friend request if already friends); PENDING_FRIEND_REQUEST - SENDING_FRIEND_REQUEST (already sent friend request); BLOCK - BLOCKED (cannot send friend if already blocked)... between the two users will be deemed unauthorized.

      requestBody:
        description: The ID of the other user to create relationship.
        content:
          application/json:
            schema:
              type: object
              properties:
                relatedUserId:
                  $ref: "#/components/schemas/ObjectId"

  /friend/accept:
    put:
      description: Create a friend relationship between two users. For example, if A relationship to B is SENDING_FRIEND_REQUEST and B to A is PENDING_FRIEND_REQUEST, then B can accept the friend request.
      tags:
        - relationships
      summary: Create a friend relationship
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Relationship updated successfully. This can only be achieved by B if A relationship to B is SENDING_FRIEND_REQUEST and B to A is PENDING_FRIEND_REQUEST. Meaning there already existed two records of types PENDING_FRIEND_REQUEST (B to A) and SENDING_FRIEND_REQUEST (A to B).
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized. This can be due to incorrect types in both relationships (A to B and B to A) as stated above. B will be deemed authorized if relationship of B to A is not PENDING_FRIEND_REQUEST and A to B is not SENDING_FRIEND_REQUEST. For example, FRIEND - FRIEND (cannot accept friend request if already friends), PENDING_FRIEND_REQUEST - SENDING_FRIEND_REQUEST (B cannot accept friend request if B is the one who sent the request),.. will be deemed unauthorized.

      requestBody:
        description: The ID of the other user to create relationship.
        content:
          application/json:
            schema:
              type: object
              properties:
                relatedUserId:
                  $ref: "#/components/schemas/ObjectId"

  /friend/decline:
    put:
      description: Delete a friend sending and pending relationship between two users. For example, if A relationship to B is SENDING_FRIEND_REQUEST and B to A is PENDING_FRIEND_REQUEST, then B can decline the friend request. Note that there does exist a relationship of type STRANGER or any type equivalent to it, so this will delete the already existed two records between the users.
      tags:
        - relationships
      summary: Delete a relationship
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Relationship deleted successfully. This can only be achieved by B if A relationship to B is SENDING_FRIEND_REQUEST and B to A is PENDING_FRIEND_REQUEST. Meaning there already existed two records of types PENDING_FRIEND_REQUEST (B to A) and SENDING_FRIEND_REQUEST (A to B).
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized. This can be due to incorrect types in both relationships (A to B and B to A) as stated above. B will be deemed authorized if relationship of B to A is not PENDING_FRIEND_REQUEST and A to B is not SENDING_FRIEND_REQUEST. For example, FRIEND - FRIEND (cannot decline friend request if already friends), PENDING_FRIEND_REQUEST - SENDING_FRIEND_REQUEST (B cannot decline friend request if B is the one who sent the request),.. will be deemed unauthorized.

      requestBody:
        description: The ID of the other user to delete relationship.
        content:
          application/json:
            schema:
              type: object
              properties:
                relatedUserId:
                  $ref: "#/components/schemas/ObjectId"

  /friends/search:
    get:
      description: Retrieve a page of friends associated with the current logged in user, with the support of cursor-based pagination ordered/based on a searched string.
      tags:
        - relationships
      summary: Get friends of the current user.
      parameters:
        - name: name
          in: query
          description: The string of name that is being searched for. When this query is empty, it should return a page of friends in alphabetical order with cursor-based pagination.
          schema:
            type: string
        - name: pageSize
          in: query
          description: The number of user one page. When this query is empty, a default value of 10 will be used. This only accepts positive values for pageSize.
          schema:
            type: integer
            default: 10
        - name: cursor
          in: query
          description: The ID of the most relevant user of the last messages page. When this query is empty, a default value of null will be used.
          schema:
            allOf:
              - $ref: "#/components/schemas/ObjectId"
            default: null
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of friends related to the searched name.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      $ref: "#/components/schemas/ObjectId"
                    name:
                      type: string
                    image:
                      type: string
                    relationshipType:
                      $ref: "#/components/schemas/RelationshipType"
                    originalConversationId:
                      $ref: "#/components/schemas/ObjectId"

        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.

  /users/search:
    get:
      description: Retrieve a page of users matches a string name, with the support of cursor-based pagination ordered/based on a searched string.
      tags:
        - social
      summary: Get users infomation with a searched name.
      parameters:
        - name: name
          in: query
          description: The string of name that is being searched for.
          required: true
          schema:
            type: string
        - name: pageSize
          in: query
          description: The number of user one page. When this query is empty, a default value of 10 will be used. This only accepts positive values for pageSize.
          schema:
            type: integer
            default: 10
        - name: cursor
          in: query
          description: The ID of the most relevant user of the last messages page. When this query is empty, a default value of null will be used.
          schema:
            allOf:
              - $ref: "#/components/schemas/ObjectId"
            default: null
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of friends related to the searched name.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      $ref: "#/components/schemas/ObjectId"
                    name:
                      type: string
                    image:
                      type: string
                    relationshipType:
                      $ref: "#/components/schemas/RelationshipType"
                    originalConversationId:
                      $ref: "#/components/schemas/ObjectId"
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token for authentication. Use the format "Bearer YOUR_JWT_TOKEN". The JWT token is signed with HS256 using a secret key.
  schemas:
    ObjectId:
      type: string
      pattern: "^[0-9a-fA-F]{24}$"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
          description: MongoDB _id of the user.
        name:
          type: string
          description: The user's name, e.g., "Jackie Chan."
        email:
          type: string
          format: email
          description: The email address associated with the user's account. It should be a valid email address, e.g., "user@example.com."
        emailVerified:
          type: string
          format: date-time
          description: The timestamp when the email address was verified.
        image:
          type: string
          format: uri
          description: URL to the user's profile image.
        hashedPassword:
          type: string
          description: Hashed password for user authentication.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the user account was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the user account was last updated.
        conversationsIds:
          type: array
          items:
            $ref: "#/components/schemas/ObjectId"
            description: List of conversation IDs the user is part of
        seenMessageIds:
          type: array
          items:
            $ref: "#/components/schemas/ObjectId"
            description: List of message IDs the user has seen
    Message:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
          description: MongoDB _id of the message.
        body:
          type: string
          example: "This is a message."
          description: The content of the message.
        image:
          type: string
          format: uri
          example: "https://fastly.picsum.photos/id/237/200/300.jpg?hmac=TmmQSbShHz9CdQm0NkEjx1Dyh_Y984R9LpNrpvH2D_U"
          description: URL to an image associated with the message.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the message was created.
        seenIds:
          type: array
          items:
            $ref: "#/components/schemas/ObjectId"
            description: An array of user IDs that has seen the message
        conversationId:
          $ref: "#/components/schemas/ObjectId"
          description: MongoDB _id of the associated conversation.
        senderId:
          $ref: "#/components/schemas/ObjectId"

    Conversation:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
          description: MongoDB _id of the conversation.
        createdAt:
          type: string
          format: date-time
          description: Date and time when the conversation was created
        name:
          type: string
          description: Optional name for the conversation
        lastActive:
          type: string
          format: date-time
          description: Date and time of the last activity in the conversation
        lastMessageId:
          $ref: "#/components/schemas/ObjectId"
          description: References the latest message in the conversation
        isGroup:
          type: boolean
          description: Indicates whether the conversation is a group chat
        groupAvatar:
          type: string
          format: uri
          description: Optional avatar for group conversations
        nicknames:
          type: array
          items:
            $ref: "#/components/schemas/Nickname"
          description: Nicknames for users within the conversation
        userIds:
          type: array
          items:
            $ref: "#/components/schemas/ObjectId"
            description: List of user IDs belong to the conversation

    # User_Relationship model
    User_Relationship:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
          description: Unique identifier for each relationship
        type:
          type: string
          enum:
            - FRIEND
            - BLOCK
            - FOLLOWING
            - PENDING_FRIEND_REQUEST
            - SENDING_FRIEND_REQUEST
          description: Type of relation based on the Relationship enum
        createdAt:
          type: string
          format: date-time
          description: Date and time when the relationship was created
        relatingUserId:
          $ref: "#/components/schemas/ObjectId"
          description: The ID of the user in the relationship
        relatedUserId:
          $ref: "#/components/schemas/ObjectId"
          description: The ID of the other user in the relationship
    Nickname:
      type: object
      required: [userId, nickname]
      properties:
        userId:
          $ref: "#/components/schemas/ObjectId"
          description: MongoDB _id of the user
        nickname:
          type: string
          description: Optional nickname for a user
    RelationshipType:
      type: string
      enum:
        - FRIEND
        - BLOCK
        - FOLLOWING
        - PENDING_FRIEND_REQUEST
        - SENDING_FRIEND_REQUEST
