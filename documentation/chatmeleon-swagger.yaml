openapi: 3.0.3
info:
  title: Chatmeleon
  description: |-

    Welcome to our Swagger documentation with API. This is a Chatmeleon Server based on the OpenAPI 3.0 specification. 

    Useful link:
    - [Chatmeleon repository](https://github.com/Quy-Du-Sai-Gon/Chatmeleon-App)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:5000
tags:
  - name: conversations
  - name: messages
paths:
  /conversations:
    get:
      description: Retrieve a page of conversations associated with the current logged in user, with the support of cursor-based pagination.
      tags:
        - conversations
      summary: Get current user's conversations
      parameters:
        - name: pageSize
          in: query
          description: The number of conversations in one page.
          schema:
            type: integer
            default: 10
        - name: cursor
          in: query
          description: The ID of the earliest converation of the last messages page.
          schema:
            type: string
            pattern: "^[0-9a-f]{24}$"
            default: null
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of conversations related to the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    lastMessageId:
                      type: string
                    name:
                      type: string
                    groupAvatar:
                      type: string
                    isGroup:
                      type: boolean
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.
    post:
      description: Create the first non-group conversation with the first message
      tags:
        - conversations
      summary: Create the first non-group conversation
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A conversations with the first message related to the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation:
                    $ref: "#/components/schemas/Conversation"
                  messages:
                    $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.
      requestBody:
        description: Message data to create.
        content:
          application/json:
            schema:
              type: object
              properties:
                relatedUserId:
                  type: string
                  pattern: "^[0-9a-f]{24}$"
                body:
                  type: string
                image:
                  type: string
  /conversations/{conversationId}:
    get:
      description: Retrieve a conversation infomation by its ID.
      tags:
        - conversations
      summary: Get a conversation
      parameters:
        - name: conversationId
          in: path
          description: The unique conversation ID.
          required: true
          schema:
            type: string
          example: "fdf919880bcde1e42cb3e588"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A conversation record.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.

  /conversations/{conversationId}/messages:
    get:
      description: Retrieve a page of messages of a conversation identified by the conversation's ID with the support of cursor-based pagination.
      tags:
        - messages
      summary: Get all messages in a conversation
      parameters:
        - name: conversationId
          in: path
          description: The unique conversation ID.
          required: true
          schema:
            type: string
          example: "fdf919880bcde1e42cb3e588"
        - name: pageSize
          in: query
          description: The number of conversations in one page.
          schema:
            type: integer
            default: 10
        - name: cursor
          in: query
          description: The ID of the earliest message of the previous messages page.
          schema:
            type: string
            pattern: "^[0-9a-f]{24}$"
            default: null
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All messages's information.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/Message"

        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.
  /messages:
    post:
      description: Create a new message.
      tags:
        - messages
      summary: Create a message
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Message created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.

      requestBody:
        description: Message data to create.
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                image:
                  type: string
                conversationId:
                  type: string
                  pattern: "^[0-9a-f]{24}$"
  /user/messages:
    get:
      description: Retrieve all messages of the current user
      tags:
        - messages
      summary: Get all messages of a user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All messages' information.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized - JWT token is missing or invalid.
        "403":
          description: Unauthorized - User is unauthorized.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token for authentication. Use the format "Bearer YOUR_JWT_TOKEN". The JWT token is signed with HS256 using a secret key.
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          pattern: "^[0-9a-f]{24}$"
          description: MongoDB _id of the user.
        name:
          type: string
          description: The user's name, e.g., "Jackie Chan."
        email:
          type: string
          format: email
          description: The email address associated with the user's account. It should be a valid email address, e.g., "user@example.com."
        emailVerified:
          type: string
          format: date-time
          description: The timestamp when the email address was verified.
        image:
          type: string
          description: URL to the user's profile image.
        hashedPassword:
          type: string
          description: Hashed password for user authentication.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the user account was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the user account was last updated.
        conversationsIds:
          type: array
          items:
            type: string
            format: uuid
            description: List of conversation IDs the user is part of
        seenMessageIds:
          type: array
          items:
            type: string
            format: uuid
            description: List of message IDs the user has seen

    Account:
      type: object
      properties:
        id:
          type: string
          pattern: "^[0-9a-f]{24}$"
          description: MongoDB _id of the account.
        userId:
          type: string
          pattern: "^[0-9a-f]{24}$"
          description: User ID
        type:
          type: string
          description: Type of account (e.g., "google", "facebook")
        provider:
          type: string
          description: Authentication provider
        providerAccountId:
          type: string
          description: Identifier from the authentication provider
        refresh_token:
          type: string
          description: Refresh token for authentication
        access_token:
          type: string
          description: Access token for authentication
        expires_at:
          type: integer
          description: Expiration time for access token
        token_type:
          type: string
          description: Token type
        scope:
          type: string
          description: Scope of the access token
        id_token:
          type: string
          description: ID token from the authentication provider
        session_state:
          type: string
          description: Session state
    Message:
      type: object
      properties:
        id:
          type: string
          pattern: "^[0-9a-f]{24}$"
          description: MongoDB _id of the message.
        body:
          type: string
          example: "This is a message."
          description: The content of the message.
        image:
          type: string
          example: "https://fastly.picsum.photos/id/237/200/300.jpg?hmac=TmmQSbShHz9CdQm0NkEjx1Dyh_Y984R9LpNrpvH2D_U"
          description: URL to an image associated with the message.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the message was created.
        seenIds:
          type: array
          items:
            type: string
            pattern: "^[0-9a-f]{24}$"
        conversationId:
          type: string
          pattern: "^[0-9a-f]{24}$"
          description: MongoDB _id of the associated conversation.
        senderId:
          type: string
          pattern: "^[0-9a-f]{24}$"

    Conversation:
      type: object
      properties:
        id:
          type: string
          pattern: "^[0-9a-f]{24}$"
          description: MongoDB _id of the conversation.
        createdAt:
          type: string
          format: date-time
          description: Date and time when the conversation was created
        name:
          type: string
          description: Optional name for the conversation
        lastActive:
          type: string
          format: date-time
          description: Date and time of the last activity in the conversation
        lastMessageId:
          type: string
          format: uuid
          description: References the latest message in the conversation
        isGroup:
          type: boolean
          description: Indicates whether the conversation is a group chat
        groupAvatar:
          type: string
          description: Optional avatar for group conversations
        nicknames:
          type: array
          items:
            $ref: "#/components/schemas/Nickname"
          description: Nicknames for users within the conversation
        userIds:
          type: array
          items:
            type: string
            format: uuid
            description: List of user IDs belong to the conversation
        messageIds:
          type: array
          items:
            type: string
            format: uuid
            description: List of message IDs belong to the conversation

    # User_Relationship model
    User_Relationship:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for each relationship
        type:
          type: string
          enum:
            - FRIEND
            - BLOCK
            - FOLLOWING
            - PENDING_FRIEND_REQUEST
            - SENDING_FRIEND_REQUEST
          description: Type of relation based on the Relationship enum
        createdAt:
          type: string
          format: date-time
          description: Date and time when the relationship was created
        relatingUserId:
          type: string
          format: uuid
          description: The ID of the user in the relationship
        relatedUserId:
          type: string
          format: uuid
          description: The ID of the other user in the relationship
    Nickname:
      type: object
      properties:
        userId:
          type: string
          pattern: "^[0-9a-f]{24}$"
          description: MongoDB _id of the user
        nickname:
          type: string
          description: Optional nickname for a user
