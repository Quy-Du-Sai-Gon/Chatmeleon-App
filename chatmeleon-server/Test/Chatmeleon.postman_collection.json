{
	"info": {
		"_postman_id": "43bf5bbf-5afb-41d1-baf7-63f3c59c0fb9",
		"name": "Chatmeleon",
		"description": "\nWelcome to our Swagger documentation with API. This is a Chatmeleon Server based on the OpenAPI 3.0 specification. \n\nUseful link:\n- [Chatmeleon repository](https://github.com/Quy-Du-Sai-Gon/Chatmeleon-App)\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33072764"
	},
	"item": [
		{
			"name": "conversations",
			"item": [
				{
					"name": "{conversationId}",
					"item": [
						{
							"name": "messages",
							"item": [
								{
									"name": "Get all messages in a conversation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 401\", function () {",
													"  pm.expect(pm.response.code).to.eql(401);",
													"});",
													"",
													"",
													"pm.test(\"Response content type is text/plain\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
													"});",
													"",
													"",
													"pm.test(\"Response body contains the message 'Unauthorized - JWT token is missing or invalid'\", function () {",
													"    const responseData = pm.response.text();",
													"",
													"    pm.expect(responseData).to.include(\"Unauthorized - JWT token is missing or invalid\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Messages are sorted from newest to oldest based on the cursor\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    ",
													"    let previousDate = new Date();",
													"    responseData.forEach(function(message) {",
													"        pm.expect(new Date(message.createdAt)).to.be.at.most(previousDate);",
													"        previousDate = new Date(message.createdAt);",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response body is an array with at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Each message in the response array has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    ",
													"    responseData.forEach(function(message) {",
													"        pm.expect(message).to.include.all.keys('id', 'body', 'image', 'createdAt', 'seenIds', 'senderId');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"CreatedAt field of each message is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    responseData.forEach(message => {",
													"        pm.expect(message.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Response array is sorted from newest to oldest based on the cursor\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    ",
													"    let isSorted = true;",
													"    for (let i = 0; i < responseData.length - 1; i++) {",
													"        if (responseData[i].createdAt < responseData[i + 1].createdAt) {",
													"            isSorted = false;",
													"            break;",
													"        }",
													"    }",
													"    pm.expect(isSorted).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "jwt",
											"jwt": [
												{
													"key": "algorithm",
													"value": "HS256",
													"type": "string"
												},
												{
													"key": "header",
													"value": "{{eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..I-0roBisn5JtGc3C.9XRukBzbqdmSjqjx21ZqW0g5laCUqhA9Td7IBMl5dZV1AA9NoMW0436lrstUNGEpfKviWOlkp4EUambijqL-v9vipRdGmPc_89X8lMbqeTmFqsC_bO8NgpyqOFarKudI5MAsSWCVW3iCF93qKX1O5IW9NgyL5_Ql0VETzrnQpSIvoUVYicpmUFxT3EB7IngCCyVXLPk9Y2xxrrV6LgMdISeHbExvwwQqRtsBxLfTMC_ckaHPNRgCcCA0KZh9uBp2TVvo0CiPeibBbRYj0SDjOCT8nW-o-jj6jFDfN1lJ44ErzZUJEVAvMqy6N6A3kcyDdsXFli_ohE2xOE6a2jHPD8XzmRL64bMtvFRSern1NSZZg4_yioGpI5ca0xA0w9PWVuG9nSTgk6ByyxlaSG57vBVaTAfObyIm0PuTO8Aiv6OLfRVHzL_KTqFip5k6GEGNmSzZb3Q.8Vyj6QcF6zoJAZxk1DBb8Q}}",
													"type": "string"
												},
												{
													"key": "isSecretBase64Encoded",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "payload",
													"value": "{\r\n    \"userId\" : \"65e1e2f7fc5ceb10d6d76423\"\r\n}",
													"type": "string"
												},
												{
													"key": "secret",
													"value": "CHAT",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "headerPrefix",
													"value": "Bearer",
													"type": "string"
												},
												{
													"key": "queryParamKey",
													"value": "token",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversationId/messages?pageSize=10&cursor=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversationId",
												"messages"
											],
											"query": [
												{
													"key": "pageSize",
													"value": "10",
													"description": "The number of messages in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return a pageSize number of message that is older than the cursor, for example [cursor = mess2.id; pageSize = 2] will return [mess3, mess4]. A negative pageSize will do the opposite, [cursor = mess4.id; pageSize = -2] will return [mess2, mess3]."
												},
												{
													"key": "cursor",
													"value": "",
													"description": "The ID of the message, adjacent to which a page of other messages will be retrieved. This can be used in pagination to get the next message page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently sent pageSize number of messages. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [mess1, mess2], [cursor = null; pageSize = -3] will return [mess3, mess4, mess5]."
												}
											],
											"variable": [
												{
													"key": "conversationId",
													"value": "8dcab1b67643088e62dfa9be",
													"description": "(Required) The unique conversation ID."
												}
											]
										},
										"description": "Retrieve a page of messages of a conversation identified by the conversation's ID with the support of cursor-based pagination. The page will be an array containing the newest messages to the oldest messgaes from the cursor. For example [mess1, mess2, mess3, mess4, mess5] with mess1 being the most recently sent message and mess5 being the oldest message."
									},
									"response": [
										{
											"name": "All messages's information.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversationId/messages?pageSize=10&cursor=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversationId",
														"messages"
													],
													"query": [
														{
															"key": "pageSize",
															"value": "10",
															"description": "The number of messages in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return a pageSize number of message that is older than the cursor, for example [cursor = mess2.id; pageSize = 2] will return [mess3, mess4]. A negative pageSize will do the opposite, [cursor = mess4.id; pageSize = -2] will return [mess2, mess3]."
														},
														{
															"key": "cursor",
															"value": "",
															"description": "The ID of the message, adjacent to which a page of other messages will be retrieved. This can be used in pagination to get the next message page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently sent pageSize number of messages. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [mess1, mess2], [cursor = null; pageSize = -3] will return [mess3, mess4, mess5]."
														}
													],
													"variable": [
														{
															"key": "conversationId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"b4915f33891720760437ef20\",\n    \"body\": \"<string>\",\n    \"image\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"seenIds\": [\n      \"75036f1b205ac4fcbb03d490\",\n      \"712f996aafbe4f52c1ba649a\"\n    ],\n    \"senderId\": \"a2d196c48e901374b2855ddc\"\n  },\n  {\n    \"id\": \"ddb88d85c57e864ff263d1be\",\n    \"body\": \"<string>\",\n    \"image\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"seenIds\": [\n      \"90ccc57a3d70c02ed666dc74\",\n      \"79acbb0a58960bdf16a0b08e\"\n    ],\n    \"senderId\": \"8adfc4468cc406e28460cf47\"\n  }\n]"
										},
										{
											"name": "Unauthorized - JWT token is missing or invalid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversationId/messages?pageSize=10&cursor=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversationId",
														"messages"
													],
													"query": [
														{
															"key": "pageSize",
															"value": "10",
															"description": "The number of messages in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return a pageSize number of message that is older than the cursor, for example [cursor = mess2.id; pageSize = 2] will return [mess3, mess4]. A negative pageSize will do the opposite, [cursor = mess4.id; pageSize = -2] will return [mess2, mess3]."
														},
														{
															"key": "cursor",
															"value": "",
															"description": "The ID of the message, adjacent to which a page of other messages will be retrieved. This can be used in pagination to get the next message page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently sent pageSize number of messages. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [mess1, mess2], [cursor = null; pageSize = -3] will return [mess3, mess4, mess5]."
														}
													],
													"variable": [
														{
															"key": "conversationId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized - User is unauthorized.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversationId/messages?pageSize=10&cursor=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversationId",
														"messages"
													],
													"query": [
														{
															"key": "pageSize",
															"value": "10",
															"description": "The number of messages in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return a pageSize number of message that is older than the cursor, for example [cursor = mess2.id; pageSize = 2] will return [mess3, mess4]. A negative pageSize will do the opposite, [cursor = mess4.id; pageSize = -2] will return [mess2, mess3]."
														},
														{
															"key": "cursor",
															"value": "",
															"description": "The ID of the message, adjacent to which a page of other messages will be retrieved. This can be used in pagination to get the next message page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently sent pageSize number of messages. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [mess1, mess2], [cursor = null; pageSize = -3] will return [mess3, mess4, mess5]."
														}
													],
													"variable": [
														{
															"key": "conversationId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - messageId and createdAt\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.messageId).to.exist;\r",
													"    pm.expect(responseData.createdAt).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"MessageId should not be empty\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.messageId).to.exist.and.to.not.be.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"CreatedAt is in a valid date format\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "jwt",
											"jwt": [
												{
													"key": "algorithm",
													"value": "HS256",
													"type": "string"
												},
												{
													"key": "header",
													"value": "{{eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..I-0roBisn5JtGc3C.9XRukBzbqdmSjqjx21ZqW0g5laCUqhA9Td7IBMl5dZV1AA9NoMW0436lrstUNGEpfKviWOlkp4EUambijqL-v9vipRdGmPc_89X8lMbqeTmFqsC_bO8NgpyqOFarKudI5MAsSWCVW3iCF93qKX1O5IW9NgyL5_Ql0VETzrnQpSIvoUVYicpmUFxT3EB7IngCCyVXLPk9Y2xxrrV6LgMdISeHbExvwwQqRtsBxLfTMC_ckaHPNRgCcCA0KZh9uBp2TVvo0CiPeibBbRYj0SDjOCT8nW-o-jj6jFDfN1lJ44ErzZUJEVAvMqy6N6A3kcyDdsXFli_ohE2xOE6a2jHPD8XzmRL64bMtvFRSern1NSZZg4_yioGpI5ca0xA0w9PWVuG9nSTgk6ByyxlaSG57vBVaTAfObyIm0PuTO8Aiv6OLfRVHzL_KTqFip5k6GEGNmSzZb3Q.8Vyj6QcF6zoJAZxk1DBb8Q}}",
													"type": "string"
												},
												{
													"key": "isSecretBase64Encoded",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "payload",
													"value": "{\r\n    \"userId\" : \"65e1e2f7fc5ceb10d6d76423\"\r\n}",
													"type": "string"
												},
												{
													"key": "secret",
													"value": "CHAT",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "headerPrefix",
													"value": "Bearer",
													"type": "string"
												},
												{
													"key": "queryParamKey",
													"value": "token",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"body\": \"<string>\",\n  \"image\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversationId/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversationId",
												"messages"
											],
											"variable": [
												{
													"key": "conversationId",
													"value": "8dcab1b67643088e62dfa9be",
													"description": "(Required) The unique conversation ID."
												}
											]
										},
										"description": "Create a new message."
									},
									"response": [
										{
											"name": "Message created successfully.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"body\": \"<string>\",\n  \"image\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversationId/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversationId",
														"messages"
													],
													"variable": [
														{
															"key": "conversationId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"messageId\": \"550ab42e0e22bba911d0b8d5\",\n  \"createdAt\": \"<dateTime>\"\n}"
										},
										{
											"name": "Unauthorized - JWT token is missing or invalid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"body\": \"<string>\",\n  \"image\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversationId/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversationId",
														"messages"
													],
													"variable": [
														{
															"key": "conversationId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized - User is unauthorized.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"body\": \"<string>\",\n  \"image\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversationId/messages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversationId",
														"messages"
													],
													"variable": [
														{
															"key": "conversationId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get a conversation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.include.all.keys('createdAt', 'name', 'lastActive', 'lastMessageId', 'isGroup', 'groupAvatar', 'nicknames', 'userIds');",
											"});",
											"",
											"",
											"pm.test(\"UserIds array is present and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.userIds).to.exist.and.to.be.an('array').with.lengthOf.at.least(1, \"UserIds array should contain at least one element\");",
											"});",
											"",
											"",
											"pm.test(\"LastActive is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.lastActive).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"LastActive should be in a valid date format\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is text/plain\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"text/plain\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the nicknames array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.nicknames).to.be.an('array');",
											"    responseData.nicknames.forEach(function(nickname) {",
											"        pm.expect(nickname).to.have.property('userId');",
											"        pm.expect(nickname).to.have.property('nickname');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"CreatedAt field is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "jwt",
									"jwt": [
										{
											"key": "algorithm",
											"value": "HS256",
											"type": "string"
										},
										{
											"key": "header",
											"value": "{{eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..I-0roBisn5JtGc3C.9XRukBzbqdmSjqjx21ZqW0g5laCUqhA9Td7IBMl5dZV1AA9NoMW0436lrstUNGEpfKviWOlkp4EUambijqL-v9vipRdGmPc_89X8lMbqeTmFqsC_bO8NgpyqOFarKudI5MAsSWCVW3iCF93qKX1O5IW9NgyL5_Ql0VETzrnQpSIvoUVYicpmUFxT3EB7IngCCyVXLPk9Y2xxrrV6LgMdISeHbExvwwQqRtsBxLfTMC_ckaHPNRgCcCA0KZh9uBp2TVvo0CiPeibBbRYj0SDjOCT8nW-o-jj6jFDfN1lJ44ErzZUJEVAvMqy6N6A3kcyDdsXFli_ohE2xOE6a2jHPD8XzmRL64bMtvFRSern1NSZZg4_yioGpI5ca0xA0w9PWVuG9nSTgk6ByyxlaSG57vBVaTAfObyIm0PuTO8Aiv6OLfRVHzL_KTqFip5k6GEGNmSzZb3Q.8Vyj6QcF6zoJAZxk1DBb8Q}}",
											"type": "string"
										},
										{
											"key": "isSecretBase64Encoded",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "payload",
											"value": "{\r\n    \"userId\" : \"65e1e2f7fc5ceb10d6d76423\"\r\n}",
											"type": "string"
										},
										{
											"key": "secret",
											"value": "CHAT",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "queryParamKey",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversationId"
									],
									"variable": [
										{
											"key": "conversationId",
											"value": "8dcab1b67643088e62dfa9be",
											"description": "(Required) The unique conversation ID."
										}
									]
								},
								"description": "Retrieve a conversation infomation by its ID."
							},
							"response": [
								{
									"name": "A conversation record.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversationId"
											],
											"variable": [
												{
													"key": "conversationId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"createdAt\": \"<dateTime>\",\n  \"name\": \"<string>\",\n  \"lastActive\": \"<dateTime>\",\n  \"lastMessageId\": \"96e78a91b9b9e126a7aabf14\",\n  \"isGroup\": \"<boolean>\",\n  \"groupAvatar\": \"<string>\",\n  \"nicknames\": [\n    {\n      \"userId\": \"6ef7d146947e75cf8bc3e975\",\n      \"nickname\": \"<string>\"\n    },\n    {\n      \"userId\": \"fe63c0bbd7af440354576d85\",\n      \"nickname\": \"<string>\"\n    }\n  ],\n  \"userIds\": [\n    \"1d6db23ff91272a8b399c1d2\",\n    \"e481dc9a92764d4e9d8a5666\"\n  ]\n}"
								},
								{
									"name": "Unauthorized - JWT token is missing or invalid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversationId"
											],
											"variable": [
												{
													"key": "conversationId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized - User is unauthorized.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversationId"
											],
											"variable": [
												{
													"key": "conversationId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get current user's conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type header is text/plain\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"text/plain\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains the message 'Unauthorized - JWT token is missing or invalid'\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"\r",
									"    pm.expect(responseData).to.include(\"Unauthorized - JWT token is missing or invalid\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is text/plain\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"text/plain\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response array is sorted from newest conversation to oldest conversation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    let sorted = true;\r",
									"    for (let i = 0; i < responseData.length - 1; i++) {\r",
									"        if (new Date(responseData[i].lastMessageId) < new Date(responseData[i + 1].lastMessageId)) {\r",
									"            sorted = false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(sorted).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{{eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..I-0roBisn5JtGc3C.9XRukBzbqdmSjqjx21ZqW0g5laCUqhA9Td7IBMl5dZV1AA9NoMW0436lrstUNGEpfKviWOlkp4EUambijqL-v9vipRdGmPc_89X8lMbqeTmFqsC_bO8NgpyqOFarKudI5MAsSWCVW3iCF93qKX1O5IW9NgyL5_Ql0VETzrnQpSIvoUVYicpmUFxT3EB7IngCCyVXLPk9Y2xxrrV6LgMdISeHbExvwwQqRtsBxLfTMC_ckaHPNRgCcCA0KZh9uBp2TVvo0CiPeibBbRYj0SDjOCT8nW-o-jj6jFDfN1lJ44ErzZUJEVAvMqy6N6A3kcyDdsXFli_ohE2xOE6a2jHPD8XzmRL64bMtvFRSern1NSZZg4_yioGpI5ca0xA0w9PWVuG9nSTgk6ByyxlaSG57vBVaTAfObyIm0PuTO8Aiv6OLfRVHzL_KTqFip5k6GEGNmSzZb3Q.8Vyj6QcF6zoJAZxk1DBb8Q}}",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "payload",
									"value": "{\r\n    \"userId\" : \"65e1e2f7fc5ceb10d6d76423\"\r\n}",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "CHAT",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/conversations?pageSize=10&cursor=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "10",
									"description": "The number of conversation in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return pageSize number of conversation that is older than the cursor, for example [cursor = convo2.id; pageSize = 2] will return [convo3, convo4]. A negative pageSize will do the opposite, [cursor = convo4.id; pageSize = -2] will return [convo2, convo3]."
								},
								{
									"key": "cursor",
									"value": "",
									"description": "The ID of the conversation, adjacent to which a page of other conversations will be retrieved. This can be used in pagination to get the next conversation page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently active pageSize number of conversation. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [convo1, convo2], [cursor = null; pageSize = -3] will return [convo3, convo4, convo5]."
								}
							]
						},
						"description": "Retrieve a page of conversations associated with the current logged in user, with the support of cursor-based pagination. The page will be an array containing the newest conversation to the oldest conversation from the cursor. For example [convo1, convo2, convo3, convo4, convo5] with convo1 being the most recently active conversation and convo5 being the oldest active conversation."
					},
					"response": [
						{
							"name": "An array of conversations related to the user.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations?pageSize=10&cursor=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "10",
											"description": "The number of conversation in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return pageSize number of conversation that is older than the cursor, for example [cursor = convo2.id; pageSize = 2] will return [convo3, convo4]. A negative pageSize will do the opposite, [cursor = convo4.id; pageSize = -2] will return [convo2, convo3]."
										},
										{
											"key": "cursor",
											"value": "",
											"description": "The ID of the conversation, adjacent to which a page of other conversations will be retrieved. This can be used in pagination to get the next conversation page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently active pageSize number of conversation. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [convo1, convo2], [cursor = null; pageSize = -3] will return [convo3, convo4, convo5]."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<string>\",\n    \"lastMessageId\": \"<string>\",\n    \"name\": \"<string>\",\n    \"groupAvatar\": \"<string>\",\n    \"isGroup\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"lastMessageId\": \"<string>\",\n    \"name\": \"<string>\",\n    \"groupAvatar\": \"<string>\",\n    \"isGroup\": \"<boolean>\"\n  }\n]"
						},
						{
							"name": "Unauthorized - JWT token is missing or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations?pageSize=10&cursor=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "10",
											"description": "The number of conversation in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return pageSize number of conversation that is older than the cursor, for example [cursor = convo2.id; pageSize = 2] will return [convo3, convo4]. A negative pageSize will do the opposite, [cursor = convo4.id; pageSize = -2] will return [convo2, convo3]."
										},
										{
											"key": "cursor",
											"value": "",
											"description": "The ID of the conversation, adjacent to which a page of other conversations will be retrieved. This can be used in pagination to get the next conversation page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently active pageSize number of conversation. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [convo1, convo2], [cursor = null; pageSize = -3] will return [convo3, convo4, convo5]."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized - User is unauthorized.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations?pageSize=10&cursor=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "10",
											"description": "The number of conversation in one page. When this query is empty, a default value of 10 will be used. A positive pageSize will return pageSize number of conversation that is older than the cursor, for example [cursor = convo2.id; pageSize = 2] will return [convo3, convo4]. A negative pageSize will do the opposite, [cursor = convo4.id; pageSize = -2] will return [convo2, convo3]."
										},
										{
											"key": "cursor",
											"value": "",
											"description": "The ID of the conversation, adjacent to which a page of other conversations will be retrieved. This can be used in pagination to get the next conversation page, using the id of the last item of a previously retrieved page. When this query is empty, a default value of null will be used. When the cursor is null, a positive pageSize will return the most recently active pageSize number of conversation. A negative pageSize will do the opposite, returning the oldest pageSize number of conversation. For example, [cursor = null; pageSize = 2] will return [convo1, convo2], [cursor = null; pageSize = -3] will return [convo3, convo4, convo5]."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create the first non-group conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response body contains error message or description\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Cannot POST\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is 'text/html'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include('text/html');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Verify request is for creating the first non-group conversation with the first message\", function () {",
									"    pm.expect(pm.response.status).to.equal(404);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"text/html\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{{eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..I-0roBisn5JtGc3C.9XRukBzbqdmSjqjx21ZqW0g5laCUqhA9Td7IBMl5dZV1AA9NoMW0436lrstUNGEpfKviWOlkp4EUambijqL-v9vipRdGmPc_89X8lMbqeTmFqsC_bO8NgpyqOFarKudI5MAsSWCVW3iCF93qKX1O5IW9NgyL5_Ql0VETzrnQpSIvoUVYicpmUFxT3EB7IngCCyVXLPk9Y2xxrrV6LgMdISeHbExvwwQqRtsBxLfTMC_ckaHPNRgCcCA0KZh9uBp2TVvo0CiPeibBbRYj0SDjOCT8nW-o-jj6jFDfN1lJ44ErzZUJEVAvMqy6N6A3kcyDdsXFli_ohE2xOE6a2jHPD8XzmRL64bMtvFRSern1NSZZg4_yioGpI5ca0xA0w9PWVuG9nSTgk6ByyxlaSG57vBVaTAfObyIm0PuTO8Aiv6OLfRVHzL_KTqFip5k6GEGNmSzZb3Q.8Vyj6QcF6zoJAZxk1DBb8Q}}",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "payload",
									"value": "{\r\n    \"userId\" : \"65e1e2f7fc5ceb10d6d76423\"\r\n}",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "CHAT",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"relatedUserId\": \"110294514895348404466\",\n  \"body\": \"dadfddadssdccs\",\n  \"image\": \"'https://lh3.googleusercontent.com/a/ACg8ocJGhFRHAXRXyyi5J-vlGAErQkXqM_0OVaBl0979bqe45T4=s96-c\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/conversations/{{",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								"{{"
							]
						},
						"description": "Create the first non-group conversation with the first message"
					},
					"response": [
						{
							"name": "A conversations ID with the first message ID related to the user.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"relatedUserId\": \"8c7b43d99fac1d9d7bb1bdc5\",\n  \"body\": \"<string>\",\n  \"image\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"conversationId\": \"cd20b008739aa7b881717f30\",\n  \"messageId\": \"65137763bcfba2f244112e6f\",\n  \"createdAt\": \"<dateTime>\"\n}"
						},
						{
							"name": "Unauthorized - JWT token is missing or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"relatedUserId\": \"8c7b43d99fac1d9d7bb1bdc5\",\n  \"body\": \"<string>\",\n  \"image\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized - User is unauthorized.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"relatedUserId\": \"8c7b43d99fac1d9d7bb1bdc5\",\n  \"body\": \"<string>\",\n  \"image\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..LO5mBOoq3PXq6Qw2.GhIg-Xngxew-CDsca-SlmIZnvl6ZxDoKg1GVFyWvZ6nKSSJ76_-_beV0gWexvctGLVixbAWHbGTF_ZMXXTI9xu2AWdJ_Y-viT-1fiKaGR2yH0Ml163oiFW3RzluebdSL1VkwGhe7RO7YcxTJOK2fC_eD4slmcA7AU5OqRRhCi5YOdn6bo3NEWEt3ZT5cKFbsL4KmaleDoHMkKiBMjdDhuCDXh5Y5IwzTxSXumM81YwNyxAMLsBpZOh8RsTzeWNNVkZ2BCW_4yyUKRTgKpwQiFvamG_jHAYxYOlvPHOEgbepNkQpaMUEiyfQ3ThnMACYuiyzaNIhsPvn3WMYsLxApMRdXelE6aGy_a7zo_-6C4SD2pHAWPZqAvBaWs0xfY2x_KevjdG1HpdjroqDD7qTTesqTqX38iQdX37NsAAa8kBj9pWxlpJEYH-5F-ILXJnMiG7U4yRQ.qwXU4DJN4v4_VbuZIjBlNA",
			"type": "string"
		}
	]
}